FROM node:latest

RUN mkdir /var/www
RUN mkdir /var/www/html
WORKDIR /var/www/html

RUN echo '{\n    "name": "protopollution",\n    "version": "1.0.0",\n    "description": "",\n    "main": "main.js",\n    "scripts": {\n      "test": "echo \"Error: no test specified\" && exit 1"\n    },\n    "author": "",\n    "license": "ISC",\n    "dependencies": {\n      "body-parser": "^1.20.2",\n      "cors": "^2.8.5",\n      "express": "^4.18.2"\n,         "json5": "^2.2.0"\n    }\n  }' > /var/www/html/package.json

RUN npm install

RUN echo '  const express = require("express");\n    const app = express();\n    const bodyParser = require("body-parser");\n    const cors = require("cors");\n    const json5 = require("json5");\n    var persons = [];\n    class Person {\n              constructor(obj) {\n                this.username = obj.username;\n                this.password = obj.password;\n                this.admin = obj.admin;\n                persons.push(this);\n                this.login = this.login.bind(this)\n    }\n      login(username, password) {\n                if (username === this.username && password === this.password) {\n                  console.log("Login successful");\n          return true;\n      } else {\n                  console.log("Login failed. Please check your username and password.");\n          return false;\n      }\n    }\n  }\n    var Bob = new Person({username: "Bob", password:"SupersEcretpaSsphraSe!", admin: false})\n    console.log(Bob)\n    app.use(bodyParser.urlencoded({ extended: true }));\n    app.use(cors()); // Enable CORS for all routes\n    app.use((req, res, next) => {\n        if (req.headers["content-type"] === "application/json" || req.headers["content-type"] === "application/json5") {\n          try {\n            let data = "";\n          req.on("data", (chunk) => {\n              data += chunk;\n        });\n          req.on("end", () => {\n              //console.log("DATA: ", data)\n            req.body = json5.parse(data);\n            //console.log("REQBOD: ",req.body)\n            next();\n        });\n      } catch (error) {\n            return res.status(400).json({ error: "Invalid JSON or JSON5 payload" });\n      }\n    } else {\n          next();\n    }\n  });\n    app.get("/", (req, res) => {\n          // Add a login form\n        res.send(`\n        <h1>Login Form</h1>\n        <ul>Bobs Login details have Leaked online, Use Json Injection to priv esc!</ul>\n        <p>Username: Bob \n Password: SupersEcretpaSsphraSe!<p><br/>\n        <form id="loginForm">\n          <label for="username">Username:</label>\n          <input type="text" id="username" name="username" required><br>\n          <label for="password">Password:</label>\n          <input type="password" id="password" name="password" required><br>\n          <button type="button" onclick="submitForm(&quot;login&quot;)">Login</button>\n        </form>\n        <div id="loginResult"></div>\n        <br/><br/><br/>\n        <script>\n          function submitForm(action) {\n              var form = document.getElementById("loginForm");\n            var formData = {\n                username: form.elements.username.value,\n              password: form.elements.password.value,\n          };\n      \n            var endpoint = "login";\n      \n            fetch(endpoint, {\n                method: "POST",\n              headers: {\n                  "Content-Type": "application/json",\n            },\n              body: JSON.stringify(formData),\n          })\n            .then(response => response.json())\n            .then(data => {\n                var loginResultDiv = document.getElementById("loginResult");\n              loginResultDiv.innerHTML = JSON.stringify(data);\n          })\n            .catch(error => console.error("Error:", error));\n        }\n        </script>\n        `);\n    });\n    // LOGIN\n    app.post("/login", (req, res) => {\n        validInput=inputValidation(req.body)\n      if (!validInput[0]){\n          res.status(403).send({msg: validInput[1]})\n    } else {\n        const user1 = req.body;\n      if(persons.find(person => person.username === user1.username && person.password === user1.password)) {\n          if (user1.admin) {\n            res.json({ Flag: "M*zrJTk4uddNk2b2uUz@XAnYARsxEmY55y*JDM4YM8mVBVc7!3w%C4SU" });\n      } else {\n            res.json({ username: user1.username, admin: user1.admin, msg: "You will need admin access to see the flag." });\n      }\n    } else {\n          res.status(400).json({ message: "Login failed. Please check your username and password." });\n    }\n  }});\n    // start the server\n    function inputValidation(input){\n        pattern = /^[a-zA-Z0-9_\-!@#$%^&*()+=?<>:.,;{}[\]|\s]+$/;\n      if(typeof(input) != "object")\n        return [false, "Input Error: Not Object"]\n      if(!Object.keys(input).includes("username") || !Object.keys(input).includes("password"))\n        return [false, "Input Error: username or password missing"]\n      //if(Object.keys(input).includes("admin"))\n        //return [false, "Access Denied: We dont allow self made admin!"]\n      if (!pattern.test(input.username) || !pattern.test(input.password))\n        return [false, "Input Error: username and password must match /^[a-zA-Z0-9_\-!@#$%^&*()+=?<>:.,;{}[\]|\s]+$/"];\n      return [true]\n  }\n    app.listen(3000, () => {\n        console.log("Server is running on port 3000");\n  });\n  ' > /var/www/html/index.js

CMD ["node", "index.js"]